# Generated by Django 4.2 on 2023-08-28 15:26

import apps.users.manager
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('phone', models.CharField(error_messages={'unique': 'A user with that phone already exists.'}, help_text='Required. Enter valid phone number.', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Your phone number must start with 9 and not exceed 12 characters. For example: 998993451545', regex='^(!?){0}([998]){3}([3-9]){1}([0-9]){1}([0-9]){7}$')], verbose_name='phone')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('user_type', models.CharField(choices=[('user', 'User'), ('vendor', 'Vendor'), ('manager', 'Manager'), ('seller', 'Seller')], default='user', max_length=60)),
                ('auth_status', models.CharField(choices=[('new', 'New'), ('code_verified', 'Code verified'), ('half_done', 'Done without MyID'), ('done', 'Done')], default='new', max_length=60)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', apps.users.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя Менеджер')),
                ('telegram_id', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Telegram ID')),
            ],
            options={
                'verbose_name': 'Менеджер',
                'verbose_name_plural': 'Менеджеры',
            },
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя организация')),
                ('seller_name', models.CharField(max_length=100, verbose_name='Имя продавца')),
                ('telegram_id', models.CharField(max_length=100, unique=True, verbose_name='Telegram ID')),
            ],
            options={
                'verbose_name': 'Продавец',
                'verbose_name_plural': 'Продавцы',
            },
        ),
        migrations.CreateModel(
            name='SimpleUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('passport_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Номер паспорта')),
                ('pinfl', models.CharField(blank=True, error_messages={'unique': 'A user with that pinfl already exists.'}, max_length=100, null=True, unique=True, verbose_name='ПИНФЛ')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user/')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('gender', models.CharField(blank=True, max_length=100, null=True, verbose_name='Пол')),
                ('nationality', models.CharField(blank=True, max_length=100, null=True, verbose_name='Национальность')),
                ('citizenship', models.CharField(blank=True, max_length=100, null=True, verbose_name='Гражданство')),
                ('doc_type', models.CharField(blank=True, max_length=512, null=True, verbose_name='Тип документа')),
                ('birth_place', models.CharField(blank=True, max_length=100, null=True, verbose_name='Место рождения')),
                ('region', models.CharField(blank=True, max_length=100, null=True, verbose_name='Значение региона')),
                ('district', models.CharField(blank=True, max_length=100, null=True, verbose_name='Значение района (города)')),
                ('address', models.CharField(blank=True, max_length=512, null=True, verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Обычные пользователи',
                'verbose_name_plural': 'Обычные пользователи',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название компании')),
                ('type_of_activity', models.CharField(max_length=100, verbose_name='Тип активности')),
                ('price', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(10)])),
                ('logo', models.ImageField(upload_to='vendor/')),
            ],
            options={
                'verbose_name': 'Vendor',
                'verbose_name_plural': 'Vendors',
            },
        ),
        migrations.CreateModel(
            name='Vendor_account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя сотрудника')),
                ('telegram_id', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Telegram ID')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendor', to='users.vendor', verbose_name='Vendor')),
            ],
            options={
                'verbose_name': 'Vendor account',
                'verbose_name_plural': 'Vendor accounts',
            },
        ),
        migrations.CreateModel(
            name='UserConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('expiration_time', models.DateTimeField(null=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verify_codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('phone', models.CharField(db_index=True, error_messages={'unique': 'A user with that phone already exists.'}, help_text='Required. Enter valid phone number.', max_length=150, validators=[django.core.validators.RegexValidator(message='Your phone number must start with 9 and not exceed 12 characters. For example: 998993451545', regex='^(!?){0}([998]){3}([3-9]){1}([0-9]){1}([0-9]){7}$')], verbose_name='phone')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('user_type', models.CharField(choices=[('user', 'User'), ('vendor', 'Vendor'), ('manager', 'Manager'), ('seller', 'Seller')], default='user', max_length=60)),
                ('auth_status', models.CharField(choices=[('new', 'New'), ('code_verified', 'Code verified'), ('half_done', 'Done without MyID'), ('done', 'Done')], default='new', max_length=60)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.manager')),
                ('seller', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.seller')),
                ('simple_user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.simpleusers')),
                ('vendor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.vendor_account')),
            ],
            options={
                'verbose_name': 'historical user',
                'verbose_name_plural': 'historical users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='user',
            name='manager',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='manager', to='users.manager'),
        ),
        migrations.AddField(
            model_name='user',
            name='seller',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seller', to='users.seller'),
        ),
        migrations.AddField(
            model_name='user',
            name='simple_user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='simple_user', to='users.simpleusers'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='vendor',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to='users.vendor_account'),
        ),
    ]
