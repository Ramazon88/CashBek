import datetime
import os

from django.db.models import Sum, F
from django.utils import timezone
from openpyxl.reader.excel import load_workbook
from telegram import Update, InputFile
from telegram.ext import CallbackContext
import qrcode
from io import BytesIO
from apps.main.models import Products, ACTIVE, PriceProduct, QR_code, INCOME, Token_confirm, EXPENSE, Cashbek, \
    PaymentForSeller
from apps.main.utility import get_tashkent_time
from apps.sellerbot.buttons import *
from apps.sellerbot.models import SellerTemp
from apps.users.models import Seller
from config.settings import BASE_DIR


def start_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        seller = Seller.objects.get(telegram_id=user_id, seller__is_active=True)
        text = f"<strong>–ü—Ä–æ–¥–∞–≤–µ—Ü: </strong>{seller.name}\n<strong>ID: </strong><code>{seller.telegram_id}</code>"
        update.message.reply_html(text, reply_markup=main_buttons)
        try:
            obj = SellerTemp.objects.get(tg_id=user_id)
            obj.step = 0
            obj.save()
        except:
            SellerTemp.objects.create(tg_id=user_id, step=0)
    except Exception as e:
        print(e)


def core(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    try:
        seller = Seller.objects.get(telegram_id=user_id, seller__is_active=True)
        msg = update.message.text
        step = SellerTemp.objects.get(tg_id=user_id)
        if step.step == 0 and msg == '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ö—ç—à–±—ç–∫–∞':
            SellerTemp.objects.filter(tg_id=user_id).update(step=1, qr_type=1)
            update.message.reply_html("–í–≤–µ–¥–∏—Ç–µ IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", reply_markup=home_button)
        elif step.step == 0 and msg == 'C–ø–∏—Å–∞–Ω–∏–µ –ö—ç—à–±—ç–∫–∞':
            SellerTemp.objects.filter(tg_id=user_id).update(step=1, qr_type=2)
            update.message.reply_html("–í–≤–µ–¥–∏—Ç–µ IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", reply_markup=home_button)
        elif step.step == 1 and msg != 'üè†–ì–ª–∞–≤–Ω—ã–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞':
            SellerTemp.objects.filter(tg_id=user_id).update(step=2, imei=msg)
            if step.qr_type == 1:
                objs = Products.objects.filter(imei1=msg, is_active=True)
                if objs.exists():
                    today = timezone.now()
                    promo = objs.first().promo.filter(start__lte=today, end__gte=today, status=ACTIVE)
                    if promo.exists():
                        qr_obj = QR_code.objects.filter(product=objs.first(), is_used=False, expiry_date__gt=today)
                        if qr_obj.exists():
                            SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                            update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                                      f"</strong><code>{objs.first().imei1}</code>\n\n"
                                                      "<i>‚ùå–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥</i>",
                                                      reply_markup=main_buttons)
                        else:
                            SellerTemp.objects.filter(tg_id=user_id).update(step=2, imei=msg)
                            update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n"
                                                      f"<strong>IMEI: </strong><code>{objs.first().imei1}</code>\n"
                                                      f"<strong>SKU: </strong>{objs.first().sku}\n"
                                                      "<strong>–°—É–º–º–∞ –∫—ç—à–±—ç–∫–∞: </strong>" + "{:,}".format(
                                PriceProduct.objects.get(product=objs.first(),
                                                         promo=promo.first()).price) + " C—É–º\n"
                                                                                       f"<strong>–¢–∏–ø: </strong>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ö—ç—à–±—ç–∫–∞\n\n"
                                                                                       "–ü—Ä–æ–¥—É–∫—Ç –∏ –∞–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–∫—Ü–∏–µ–πüëá",
                                                      reply_markup=qr_button)
                    else:
                        SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                        update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                                  f"</strong><code>{objs.first().imei1}</code>\n\n"
                                                  "<i>‚ùå–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏</i>",
                                                  reply_markup=main_buttons)
                else:
                    SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                    update.message.reply_html("‚ùå–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º",
                                              reply_markup=main_buttons)

            elif step.qr_type == 2:
                objs = Products.objects.filter(imei1=msg, is_active=True)
                if objs.exists():
                    today = timezone.now()
                    promo = objs.first().promo.filter(start__lte=today, end__gte=today, status=ACTIVE)
                    qr_obj = QR_code.objects.filter(product=objs.first(), is_used=False, expiry_date__gt=today)
                    if qr_obj.exists():
                        SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                        update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                                  f"</strong><code>{objs.first().imei1}</code>\n\n"
                                                  "<i>‚ùå–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥</i>",
                                                  reply_markup=main_buttons)
                    else:
                        SellerTemp.objects.filter(tg_id=user_id).update(step=2, imei=msg)
                        update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n"
                                                  f"<strong>IMEI: </strong><code>{objs.first().imei1}</code>\n"
                                                  f"<strong>SKU: </strong>{objs.first().sku}\n"
                                                  "<strong>–°—É–º–º–∞ –∫—ç—à–±—ç–∫–∞: </strong>" + "{:,}".format(
                            PriceProduct.objects.get(product=objs.first(),
                                                     promo=promo.first()).price if promo.exists() else 0) + " C—É–º\n"
                                                                                                            f"<strong>–¢–∏–ø: </strong>C–ø–∏—Å–∞–Ω–∏–µ –ö—ç—à–±—ç–∫–∞\n\n"
                                                                                                            "–ü—Ä–æ–¥—É–∫—Ç –∞–∫—Ç–∏–≤–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à–±—ç–∫üëá",
                                                  reply_markup=qr_button)
                else:
                    SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                    update.message.reply_html("‚ùå–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º",
                                              reply_markup=main_buttons)

        elif step.step == 2 and msg == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞':
            if step.qr_type == 1:
                objs = Products.objects.filter(imei1=step.imei, is_active=True)
                if objs.exists():
                    today = timezone.now()
                    promo = objs.first().promo.filter(start__lte=today, end__gte=today, status=ACTIVE)
                    if promo.exists():
                        qr_obj = QR_code.objects.filter(product=objs.first(), is_used=False, expiry_date__gt=today)
                        if qr_obj.exists():
                            SellerTemp.objects.filter(tg_id=user_id).update(step=0, imei=msg)
                            update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                                      f"</strong><code>{objs.first().imei1}</code>\n\n"
                                                      "<i>‚ùå–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥</i>",
                                                      reply_markup=main_buttons)
                        else:
                            if Token_confirm.objects.filter(product=objs.first(), expiry_date__gt=today).exists():
                                SellerTemp.objects.filter(tg_id=user_id).update(step=0, imei=msg)
                                update.message.reply_html(
                                    f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                    f"</strong><code>{objs.first().imei1}</code>\n\n"
                                    "<i>‚ùå–¢–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤ –¥—Ä—É–≥–æ–º —Å–µ–∞–Ω—Å–µ</i>",
                                    reply_markup=main_buttons)
                            else:
                                qr_code = QR_code.objects.create(product=objs.first(), types=INCOME,
                                                                 seller=Seller.objects.get(telegram_id=user_id))
                                qr = qrcode.QRCode(
                                    version=1,
                                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                                    box_size=10,
                                    border=4,
                                )
                                qr.add_data(qr_code.qr_id)
                                qr.make(fit=True)
                                img_stream = BytesIO()
                                qr.make_image(fill_color="green", back_color="white").save(img_stream)
                                binary_data = img_stream.getvalue()
                                message = update.message.reply_photo(photo=InputFile(binary_data),
                                                                     caption="–¢–∏–ø <strong>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ö—ç—à–±—ç–∫–∞</strong>\n"
                                                                             "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è <strong>2 –º–∏–Ω—É—Ç—ã</strong>\n",
                                                                     parse_mode="HTML")
                                qr_code.message_id = message["message_id"]
                                qr_code.chat_id = user_id
                                qr_code.save_edit()
                                SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                                update.message.reply_html("–ì–ª–∞–≤–Ω—ã–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞", reply_markup=main_buttons)

                    else:
                        SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                        update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                                  f"</strong><code>{objs.first().imei1}</code>\n\n"
                                                  "<i>‚ùå–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏</i>",
                                                  reply_markup=main_buttons)
                else:
                    SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                    update.message.reply_html("‚ùå–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º",
                                              reply_markup=main_buttons)
            elif step.qr_type == 2:
                objs = Products.objects.filter(imei1=step.imei, is_active=True)
                if objs.exists():
                    today = timezone.now()
                    qr_obj = QR_code.objects.filter(product=objs.first(), is_used=False, expiry_date__gt=today)
                    if qr_obj.exists():
                        SellerTemp.objects.filter(tg_id=user_id).update(step=0, imei=msg)
                        update.message.reply_html(f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                                  f"</strong><code>{objs.first().imei1}</code>\n\n"
                                                  "<i>‚ùå–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥</i>",
                                                  reply_markup=main_buttons)
                    else:
                        if Token_confirm.objects.filter(product=objs.first(), expiry_date__gt=today).exists():
                            SellerTemp.objects.filter(tg_id=user_id).update(step=0, imei=msg)
                            update.message.reply_html(
                                f"<strong>–ú–æ–¥–µ–ª: </strong>{objs.first().model}\n<strong>IMEI: "
                                f"</strong><code>{objs.first().imei1}</code>\n\n"
                                "<i>‚ùå–¢–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤ –¥—Ä—É–≥–æ–º —Å–µ–∞–Ω—Å–µ</i>",
                                reply_markup=main_buttons)
                        else:
                            qr_code = QR_code.objects.create(product=objs.first(), types=EXPENSE,
                                                             seller=Seller.objects.get(telegram_id=user_id))
                            qr = qrcode.QRCode(
                                version=1,
                                error_correction=qrcode.constants.ERROR_CORRECT_L,
                                box_size=10,
                                border=4,
                            )
                            qr.add_data(qr_code.qr_id)
                            qr.make(fit=True)
                            img_stream = BytesIO()
                            qr.make_image(fill_color="red", back_color="white").save(img_stream)
                            binary_data = img_stream.getvalue()
                            message = update.message.reply_photo(photo=InputFile(binary_data),
                                                                 caption="–¢–∏–ø <strong>C–ø–∏—Å–∞–Ω–∏–µ –ö—ç—à–±—ç–∫–∞</strong>\n"
                                                                         "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è <strong>2 –º–∏–Ω—É—Ç—ã</strong>\n",
                                                                 parse_mode="HTML")
                            qr_code.message_id = message["message_id"]
                            qr_code.chat_id = user_id
                            qr_code.save_edit()
                            SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                            update.message.reply_html("–ì–ª–∞–≤–Ω—ã–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞", reply_markup=main_buttons)


                else:
                    SellerTemp.objects.filter(tg_id=user_id).update(step=0)
                    update.message.reply_html("‚ùå–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º IMEI –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º",
                                              reply_markup=main_buttons)

        elif step.step == 0 and msg == '–ë–∞–ª–∞–Ω—Å':
            cashbek = Cashbek.objects.filter(seller=seller, active=True, types=2)
            payment = PaymentForSeller.objects.filter(seller=seller)
            total = cashbek.aggregate(all_price=Sum(F("amount")))["all_price"] if \
                cashbek.aggregate(all_price=Sum(F("amount")))["all_price"] else 0
            paid = payment.aggregate(all_price=Sum(F("amount")))["all_price"] if \
                payment.aggregate(all_price=Sum(F("amount")))["all_price"] else 0
            update.message.reply_html("<strong>‚¨ÜÔ∏è–°—É–º–º–∞ C–ø–∏—Å–∞–Ω–∏–µ –ö—ç—à–±—ç–∫–∞: </strong>{:,} –°—É–º\n<strong>‚¨áÔ∏è–û–ø–ª–∞—á–µ–Ω–Ω—ã–π: </strong>{:,} –°—É–º\n\n<strong>‚ÜîÔ∏è–ë–∞–ª–∞–Ω—Å: </strong>{:,} –°—É–º".format(total, paid, total - paid))

        elif step.step == 0 and msg == '–ö—ç—à–±—ç–∫–∏':
            SellerTemp.objects.filter(tg_id=user_id).update(step=3)
            update.message.reply_html("–í—ã–±–∏—Ä–∞—Ç—åüëá", reply_markup=report_button)

        elif step.step == 3 and msg == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—ç—à–±—ç–∫–∏':
            cashbek = Cashbek.objects.filter(seller=seller, active=True).order_by('-created_at')[:5]
            SellerTemp.objects.filter(tg_id=user_id).update(step=0)
            for i in cashbek:
                text = f"<strong>–ú–æ–¥–µ–ª: </strong>{i.product.model}\n"
                text += f"<strong>IMEI: </strong><code>{i.product.imei1}</code>\n"
                text += f"<strong>–î–∞—Ç–∞: </strong>{get_tashkent_time(i.created_at).strftime('%d-%m-%Y %H:%M')}\n"
                text += "<strong>–°—É–º–º–∞ –∫—ç—à–±—ç–∫–∞: </strong>{:,} –°—É–º\n".format(i.amount)
                text += f"<strong>–ö–ª–∏–µ–Ω—Ç: </strong>{i.user.first_name[0]}.{i.user.last_name}({i.user.simple_user.phone})"
                update.message.reply_html(text)
            update.message.reply_html("–í—ã–±–∏—Ä–∞—Ç—åüëá", reply_markup=main_buttons)

        elif step.step == 3 and msg == '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—ç—à–±—ç–∫–æ–≤ –∏ –≤—ã–ø–ª–∞—Ç':
            cashbek = Cashbek.objects.filter(seller=seller, active=True).order_by("-created_at")
            payment = PaymentForSeller.objects.filter(seller=seller).order_by("-created_at")
            total = cashbek.aggregate(all_price=Sum(F("amount")))["all_price"] if \
                cashbek.aggregate(all_price=Sum(F("amount")))["all_price"] else 0
            paid = payment.aggregate(all_price=Sum(F("amount")))["all_price"] if \
                payment.aggregate(all_price=Sum(F("amount")))["all_price"] else 0

            SellerTemp.objects.filter(tg_id=user_id).update(step=0)
            file_location = BASE_DIR / 'file/report_seller.xlsx'
            file_send = BASE_DIR / f'file/{seller.name}_report.xlsx'
            wb = load_workbook(file_location)
            sheet = wb['cashbek']
            for i_row, cash in enumerate(cashbek, start=2):
                sheet.cell(row=i_row, column=1, value=get_tashkent_time(cash.created_at).strftime('%d-%m-%Y %H:%M'))
                sheet.cell(row=i_row, column=2, value=cash.product.model)
                sheet.cell(row=i_row, column=3, value=cash.product.imei1)
                sheet.cell(row=i_row, column=4, value=cash.amount)
                sheet.cell(row=i_row, column=5, value=f"{cash.user.first_name[0]}.{cash.user.last_name}({cash.user.simple_user.phone})")
                sheet.cell(row=i_row, column=6, value=cash.get_types_display())
            payment_sheet = wb["payment"]
            payment_sheet["C2"].value = total
            payment_sheet["C3"].value = paid
            payment_sheet["C4"].value = total - paid
            for i_row, cash in enumerate(payment, start=7):
                payment_sheet.cell(row=i_row, column=1, value=get_tashkent_time(cash.created_at).strftime('%d-%m-%Y %H:%M'))
                payment_sheet.cell(row=i_row, column=2, value=cash.amount)
                payment_sheet.cell(row=i_row, column=3, value=cash.descriptions)
            wb.save(file_send)
            update.message.reply_document(open(file_send, 'rb'), reply_markup=main_buttons)
            os.remove(file_send)
        elif msg == 'üè†–ì–ª–∞–≤–Ω—ã–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞':
            SellerTemp.objects.filter(tg_id=user_id).update(step=0)
            update.message.reply_html("–ì–ª–∞–≤–Ω—ã–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞", reply_markup=main_buttons)
    except Exception as e:
        print(e)
